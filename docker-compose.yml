services:
  servicedawa:  # Primer microservicio
    build:
      context: ./ws_dawa
      dockerfile: dockerfile
    image: service-dawa-image
    volumes:
      - ./ws_dawa/:/app
    ports:
      - "1100:1008"
    networks:
      - app-network
    # depends_on:
    #   db:
    #     condition: service_healthy

  # serviceS:  # Segundo microservicio
  #   build:
  #     context: ./serviceSeguridad
  #     dockerfile: dockerfile
  #   image: service-seguridad-image
  #   volumes:
  #     - ./serviceSeguridad/static:/app/static
  #   ports:
  #     - "5002:5002"
  #   networks:
  #     - app-network
  #   depends_on:
  #     db:
  #       condition: service_healthy
  
  # serviceP:  # Tercer microservicio
  #   build:
  #     context: ./servicePacientes
  #     dockerfile: dockerfile
  #   image: service-pacientes-image
  #   volumes:
  #     - ./servicePacientes/static:/app/static
  #   ports:
  #     - "5003:5003"
  #   networks:
  #     - app-network
  #   depends_on:
  #     db:
  #       condition: service_healthy

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Foxhound2912
      POSTGRES_DB: dawa_db
    # command: >
    #   bash -c "
    #   echo 'host all all all md5' >> /var/lib/postgresql/data/pg_hba.conf
    #   && docker-entrypoint.sh postgres
    #   "
    volumes:
      - ./db_data:/var/lib/postgresql/data
      # - ./backupdawa.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: dockerfile.desarrollo
    ports:
      - "5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - servicedawa
  
  nginx: # Servicio Nginx que actuar치 como proxy inverso
    image: nginx:alpine
    ports:
      - "80:80" # Expone el puerto 80 de Nginx a tu m치quina local (acceder치s a http://localhost:80)
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Monta tu configuraci칩n de Nginx para desarrollo
    networks:
      - app-network
    depends_on:
      - frontend # Nginx depende del frontend-dev para las solicitudes a '/'
      - servicedawa  # Nginx depende del backend para las solicitudes a /api/servicedawa/

networks:
  app-network:
    driver: bridge

volumes:
  db_data: